"""
    ⏹参考资料
        https://github.com/jackfrued/Python-100-Days/blob/master/Day61-65/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-3.md
    
    ⏹背景知识1
        1. 由于GIL的存在, 导致Python多线程性能甚至比单线程更糟。
        2. GIL: 全局解释器锁 (英语: Global Interpreter Lock, 缩写GIL), 是计算机程序设计语言解释器用于同步线程的一种机制, 它使得任何时刻仅有一个线程在执行。
           即便在多核心处理器上, 使用 GIL 的解释器也只允许同一时间执行一个线程。

    1. 爬虫是典型的 I/O 密集型任务, I/O 密集型任务的特点就是程序会经常性的因为 I/O 操作而进入阻塞状态，比如我们使用 requests 获取页面代码或二进制内容
    发出一个请求之后，程序必须要等待网站返回响应之后才能继续运行，如果目标网站不是很给力或者网络状况不是很理想，那么等待响应的时间可能会很久
    而在这个过程中整个程序是一直阻塞在那里，没有做任何的事情。

    2. 我们已经知道了可以通过多线程的方式为爬虫提速，使用多线程的本质就是，当一个线程阻塞的时候
    程序还有其他的线程可以继续运转，因此整个程序就不会在阻塞和等待中浪费了大量的时间。

    3. 事实上，还有一种非常适合 I/O 密集型任务的并发编程方式，我们称之为异步编程，你也可以将它称为异步 I/O。
    这种方式并不需要启动多个线程或多个进程来实现并发，它是通过多个子程序相互协作的方式来提升 CPU 的利用率，
    解决了 I/O 密集型任务 CPU 利用率很低的问题，我一般将这种方式称为 【协作式并发】 → 【协程】

    ⏹背景知识2
        1. 协程: 
            协程, 又称微线程, 英文名Coroutine。
        2. 协程的作用:
            是在执行函数A时, 可以随时中断, 去执行函数B, 然后中断继续执行函数A (可以自由切换)。
            但这一过程并不是函数调用(没有调用语句), 这一整个过程看似像多线程, 然而协程只有一个线程执行。
    
    ⏹背景知识3
        1. import asyncio
            Python 用于 异步编程(asynchronous programming) 的标准库
            它提供了 事件循环(event loop)，用于执行 异步任务(coroutines)，让程序能够同时处理多个 I/O 操作，而不会阻塞主线程。
        2. asyncio的主要作用
            ✅ 处理 I/O 操作（如网络请求、数据库查询、文件读写）而不阻塞主线程
            ✅ 任务并发执行（多个任务同时运行）
            ✅ 提高程序效率，避免同步代码的等待时间
"""